{"ast":null,"code":"var _jsxFileName = \"/home/bran/Documents/cascade/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport WordColumn from './WordColumn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst words = [{\n  english: 'forest',\n  french: 'forêt'\n}, {\n  english: 'sibling',\n  french: 'frère et sœur'\n}, {\n  english: 'cereal',\n  french: 'céréale'\n}, {\n  english: 'desk',\n  french: 'bureau'\n}, {\n  english: 'camel',\n  french: 'chameau'\n}, {\n  english: 'butter',\n  french: 'beurre'\n}, {\n  english: 'bicycle',\n  french: 'vélo'\n}, {\n  english: 'railroad',\n  french: 'chemin de fer'\n}, {\n  english: 'folder',\n  french: 'dossier'\n}, {\n  english: 'weekly',\n  french: 'hebdomadaire'\n}, {\n  english: 'hungry',\n  french: 'faim'\n}, {\n  english: 'limestone',\n  french: 'calcaire'\n}];\nfunction App() {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [randomizedWords, setRandomizedWords] = useState(words);\n  const [pairedWords, setPairedWords] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [buttonText, setButtonText] = useState('GO');\n  const [grade, setGrade] = useState(null);\n  const handleWordClick = (word, language) => {\n    const isPaired = pairedWords.some(pair => pair[`\\${language}Word`].word.index === word.index && pair.color === 'yellow');\n    if (selectedWord && selectedWord.language !== language) {\n      // Pairing words\n      const newPair = selectedWord.language === 'english' ? {\n        englishWord: selectedWord,\n        frenchWord: word\n      } : {\n        englishWord: word,\n        frenchWord: selectedWord\n      };\n      setConnections(prevConnections => [...prevConnections.filter(c => c.color !== 'cyan'), {\n        ...newPair,\n        color: 'yellow'\n      }]);\n      setPairedWords([...pairedWords, {\n        ...newPair,\n        color: 'yellow'\n      }]);\n      setSelectedWord(null);\n    } else {\n      // Unpairing words\n      const existingPairIndex = pairedWords.findIndex(pair => pair[`\\${language}Word`].word.index === word.index && pair[`\\${language}Word`].language === language);\n      if (existingPairIndex !== -1) {\n        const updatedPairedWords = [...pairedWords];\n        updatedPairedWords.splice(existingPairIndex, 1);\n        setPairedWords(updatedPairedWords);\n      }\n      setSelectedWord({\n        word,\n        language,\n        element: word.element,\n        color: isPaired ? 'yellow' : 'cyan'\n      });\n    }\n  };\n  const handleButtonClick = () => {\n    if (buttonText === 'GO') {\n      setButtonText('GRADE');\n      setGrade(null);\n      const randomizedEnglish = [...words].sort(() => Math.random() - 0.5);\n      const randomizedFrench = [...words].sort(() => Math.random() - 0.5);\n      setRandomizedWords(randomizedEnglish.map((w, i) => ({\n        english: w.english,\n        french: randomizedFrench[i].french\n      })));\n    } else {\n      const correct = connections.filter(c => words.find(w => w.english === c.englishWord).french === c.frenchWord).length;\n      const percentage = correct / words.length * 100;\n      setGrade(percentage);\n      setButtonText('GO');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), grade !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Percentage Correct: \", grade.toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(WordColumn, {\n        words: randomizedWords.map(w => w.english),\n        onClick: handleWordClick,\n        selectedWord: selectedWord,\n        language: \"english\",\n        connections: connections,\n        pairedWords: pairedWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordColumn, {\n        words: randomizedWords.map(w => w.french),\n        onClick: handleWordClick,\n        selectedWord: selectedWord,\n        language: \"french\",\n        connections: connections,\n        pairedWords: pairedWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+3Kb+WiUvGsJ/Z5KgIJRqmVMz1I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WordColumn","jsxDEV","_jsxDEV","words","english","french","App","_s","selectedWord","setSelectedWord","randomizedWords","setRandomizedWords","pairedWords","setPairedWords","connections","setConnections","buttonText","setButtonText","grade","setGrade","handleWordClick","word","language","isPaired","some","pair","index","color","newPair","englishWord","frenchWord","prevConnections","filter","c","existingPairIndex","findIndex","updatedPairedWords","splice","element","handleButtonClick","randomizedEnglish","sort","Math","random","randomizedFrench","map","w","i","correct","find","length","percentage","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","style","display","justifyContent","_c","$RefreshReg$"],"sources":["/home/bran/Documents/cascade/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport WordColumn from './WordColumn';\n\nconst words = [\n  { english: 'forest', french: 'forêt' },\n  { english: 'sibling', french: 'frère et sœur' },\n  { english: 'cereal', french: 'céréale' },\n  { english: 'desk', french: 'bureau' },\n  { english: 'camel', french: 'chameau' },\n  { english: 'butter', french: 'beurre' },\n  { english: 'bicycle', french: 'vélo' },\n  { english: 'railroad', french: 'chemin de fer' },\n  { english: 'folder', french: 'dossier' },\n  { english: 'weekly', french: 'hebdomadaire' },\n  { english: 'hungry', french: 'faim' },\n  { english: 'limestone', french: 'calcaire' },\n];\n\nfunction App() {\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [randomizedWords, setRandomizedWords] = useState(words);\n  const [pairedWords, setPairedWords] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [buttonText, setButtonText] = useState('GO');\n  const [grade, setGrade] = useState(null);\n\n  const handleWordClick = (word, language) => {\n    const isPaired = pairedWords.some(\n      (pair) => pair[`\\${language}Word`].word.index === word.index && pair.color === 'yellow'\n    );\n  \n    if (selectedWord && selectedWord.language !== language) {\n      // Pairing words\n      const newPair = selectedWord.language === 'english'\n        ? { englishWord: selectedWord, frenchWord: word }\n        : { englishWord: word, frenchWord: selectedWord };\n  \n      setConnections((prevConnections) => [\n        ...prevConnections.filter((c) => c.color !== 'cyan'),\n        { ...newPair, color: 'yellow' },\n      ]);\n      setPairedWords([...pairedWords, { ...newPair, color: 'yellow' }]);\n      setSelectedWord(null);\n    } else {\n      // Unpairing words\n      const existingPairIndex = pairedWords.findIndex(pair => (\n        pair[`\\${language}Word`].word.index === word.index && pair[`\\${language}Word`].language === language\n      ));\n  \n      if (existingPairIndex !== -1) {\n        const updatedPairedWords = [...pairedWords];\n        updatedPairedWords.splice(existingPairIndex, 1);\n        setPairedWords(updatedPairedWords);\n      }\n  \n      setSelectedWord({ word, language, element: word.element, color: isPaired ? 'yellow' : 'cyan' });\n    }\n  };\n\n  const handleButtonClick = () => {\n    if (buttonText === 'GO') {\n      setButtonText('GRADE');\n      setGrade(null);\n      const randomizedEnglish = [...words].sort(() => Math.random() - 0.5);\n      const randomizedFrench = [...words].sort(() => Math.random() - 0.5);\n      setRandomizedWords(randomizedEnglish.map((w, i) => ({ english: w.english, french: randomizedFrench[i].french })));\n    } \n    else {\n      const correct = connections.filter(\n        (c) => words.find((w) => w.english === c.englishWord).french === c.frenchWord\n      ).length;\n      const percentage = (correct / words.length) * 100;\n      setGrade(percentage);\n      setButtonText('GO');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={handleButtonClick}>{buttonText}</button>\n      {grade !== null && <p>Percentage Correct: {grade.toFixed(2)}%</p>}\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <WordColumn\n          words={randomizedWords.map((w) => w.english)}\n          onClick={handleWordClick}\n          selectedWord={selectedWord}\n          language=\"english\"\n          connections={connections}\n          pairedWords={pairedWords}\n        />\n        <WordColumn\n          words={randomizedWords.map((w) => w.french)}\n          onClick={handleWordClick}\n          selectedWord={selectedWord}\n          language=\"french\"\n          connections={connections}\n          pairedWords={pairedWords}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}