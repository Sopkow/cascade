{"ast":null,"code":"var _jsxFileName = \"/home/bran/Documents/cascade/src/WordColumn.js\";\nimport React from 'react';\nimport WordCard from './WordCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordColumn = _ref => {\n  let {\n    words,\n    onClick,\n    selectedWord,\n    language,\n    connections,\n    pairedWords\n  } = _ref;\n  //Grab connections for each word, and return the desired language\n  const getConnectionForLanguage = () => {\n    if (language === 'english') {\n      return connections.filter(c => c.englishWord.language === 'english');\n    } else {\n      return connections.filter(c => c.frenchWord.language === 'french');\n    }\n  };\n  const connectionsForLanguage = getConnectionForLanguage();\n\n  //Custom Styling for borders\n  const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style,\n    children: words.map((word, index) => {\n      //Word pairing state variable, creates yellow highlight when paired\n      const isPaired = pairedWords.some(pair => pair[language + \"Word\"] && pair[language + \"Word\"].word && pair[language + \"Word\"].word.index === index && pair.color === 'yellow');\n      console.log('word index:', index, 'isPaired:', isPaired, 'isSelected:', selectedWord);\n      return /*#__PURE__*/_jsxDEV(WordCard, {\n        word: {\n          text: word,\n          index\n        },\n        onClick: onClick,\n        isSelected: selectedWord && selectedWord.word.index === index && selectedWord.language === language ? selectedWord.color : isPaired,\n        language: language\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = WordColumn;\nexport default WordColumn;\nvar _c;\n$RefreshReg$(_c, \"WordColumn\");","map":{"version":3,"names":["React","WordCard","jsxDEV","_jsxDEV","WordColumn","_ref","words","onClick","selectedWord","language","connections","pairedWords","getConnectionForLanguage","filter","c","englishWord","frenchWord","connectionsForLanguage","style","border","minHeight","minWidth","padding","display","flexDirection","alignItems","position","children","map","word","index","isPaired","some","pair","color","console","log","text","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bran/Documents/cascade/src/WordColumn.js"],"sourcesContent":["import React from 'react';\nimport WordCard from './WordCard';\n\nconst WordColumn = ({ words, onClick, selectedWord, language, connections, pairedWords }) => {\n    \n    \n    //Grab connections for each word, and return the desired language\n    const getConnectionForLanguage = () => {\n        if (language === 'english') {\n          return connections.filter((c) => c.englishWord.language === 'english');\n        } else {\n          return connections.filter((c) => c.frenchWord.language === 'french');\n        }\n    };\n    const connectionsForLanguage = getConnectionForLanguage();\n    \n    //Custom Styling for borders\n    const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative',\n  };\n\n  return (\n    <div style={style}>\n      {words.map((word, index) => {\n        //Word pairing state variable, creates yellow highlight when paired\n        const isPaired = pairedWords.some(\n          (pair) =>\n            pair[language + \"Word\"] &&\n            pair[language + \"Word\"].word &&\n            pair[language + \"Word\"].word.index === index &&\n            pair.color === 'yellow'\n        );\n        console.log('word index:', index, 'isPaired:', isPaired, 'isSelected:', selectedWord);\n        return (\n            <WordCard\n                key={index}\n                word={{ text: word, index }}\n                onClick={onClick}\n                isSelected={(selectedWord && selectedWord.word.index === index && selectedWord.language === language) ? selectedWord.color : isPaired}\n                language={language}\n            />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default WordColumn;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGC,IAAA,IAA0E;EAAA,IAAzE;IAAEC,KAAK;IAAEC,OAAO;IAAEC,YAAY;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAY,CAAC,GAAAN,IAAA;EAGpF;EACA,MAAMO,wBAAwB,GAAGA,CAAA,KAAM;IACnC,IAAIH,QAAQ,KAAK,SAAS,EAAE;MAC1B,OAAOC,WAAW,CAACG,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAACN,QAAQ,KAAK,SAAS,CAAC;IACxE,CAAC,MAAM;MACL,OAAOC,WAAW,CAACG,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACE,UAAU,CAACP,QAAQ,KAAK,QAAQ,CAAC;IACtE;EACJ,CAAC;EACD,MAAMQ,sBAAsB,GAAGL,wBAAwB,EAAE;;EAEzD;EACA,MAAMM,KAAK,GAAG;IACdC,MAAM,EAAE,iBAAiB;IACzBC,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE,OAAO;IACjBC,OAAO,EAAE,MAAM;IACfC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE;EACZ,CAAC;EAED,oBACEvB,OAAA;IAAKe,KAAK,EAAEA,KAAM;IAAAS,QAAA,EACfrB,KAAK,CAACsB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC1B;MACA,MAAMC,QAAQ,GAAGpB,WAAW,CAACqB,IAAI,CAC9BC,IAAI,IACHA,IAAI,CAACxB,QAAQ,GAAG,MAAM,CAAC,IACvBwB,IAAI,CAACxB,QAAQ,GAAG,MAAM,CAAC,CAACoB,IAAI,IAC5BI,IAAI,CAACxB,QAAQ,GAAG,MAAM,CAAC,CAACoB,IAAI,CAACC,KAAK,KAAKA,KAAK,IAC5CG,IAAI,CAACC,KAAK,KAAK,QAAQ,CAC1B;MACDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEN,KAAK,EAAE,WAAW,EAAEC,QAAQ,EAAE,aAAa,EAAEvB,YAAY,CAAC;MACrF,oBACIL,OAAA,CAACF,QAAQ;QAEL4B,IAAI,EAAE;UAAEQ,IAAI,EAAER,IAAI;UAAEC;QAAM,CAAE;QAC5BvB,OAAO,EAAEA,OAAQ;QACjB+B,UAAU,EAAG9B,YAAY,IAAIA,YAAY,CAACqB,IAAI,CAACC,KAAK,KAAKA,KAAK,IAAItB,YAAY,CAACC,QAAQ,KAAKA,QAAQ,GAAID,YAAY,CAAC0B,KAAK,GAAGH,QAAS;QACtItB,QAAQ,EAAEA;MAAS,GAJdqB,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAKZ;IAER,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAACC,EAAA,GAjDIvC,UAAU;AAmDhB,eAAeA,UAAU;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}