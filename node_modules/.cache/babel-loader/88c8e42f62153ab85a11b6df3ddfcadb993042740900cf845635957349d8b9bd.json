{"ast":null,"code":"var _jsxFileName = \"/home/bran/Documents/cascade/src/WordColumn.js\";\nimport React from 'react';\nimport WordCard from './WordCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordColumn = _ref => {\n  let {\n    words,\n    onClick,\n    selectedWord,\n    language,\n    connections\n  } = _ref;\n  //Grab connections for each word, and return the desired language\n  const getConnectionForLanguage = () => {\n    if (language === 'english') {\n      return connections.filter(c => c.englishWord.language === 'english');\n    } else {\n      return connections.filter(c => c.frenchWord.language === 'french');\n    }\n  };\n  const connectionsForLanguage = getConnectionForLanguage();\n\n  //Word pairing state variable, creates yellow highlight when paired\n  const isPaired = pairedWords.some(pair => pair[`\\${language}Word`].word.index === index && pair.color === 'yellow');\n\n  //Custom Styling for borders\n  const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style,\n    children: [words.map((word, index) => /*#__PURE__*/_jsxDEV(WordCard, {\n      word: {\n        text: word,\n        index\n      },\n      onClick: onClick,\n      isSelected: selectedWord && selectedWord.word.index === index && selectedWord.language === language || isPaired,\n      language: language\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none'\n      },\n      children: connectionsForLanguage.map((c, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: c.englishWord.offsetLeft + c.englishWord.offsetWidth,\n        y1: c.englishWord.offsetTop + c.englishWord.offsetHeight / 2,\n        x2: c.frenchWord.offsetLeft,\n        y2: c.frenchWord.offsetTop + c.frenchWord.offsetHeight / 2,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_c = WordColumn;\nexport default WordColumn;\nvar _c;\n$RefreshReg$(_c, \"WordColumn\");","map":{"version":3,"names":["React","WordCard","jsxDEV","_jsxDEV","WordColumn","_ref","words","onClick","selectedWord","language","connections","getConnectionForLanguage","filter","c","englishWord","frenchWord","connectionsForLanguage","isPaired","pairedWords","some","pair","word","index","color","style","border","minHeight","minWidth","padding","display","flexDirection","alignItems","position","children","map","text","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","top","left","width","height","pointerEvents","i","x1","offsetLeft","offsetWidth","y1","offsetTop","offsetHeight","x2","y2","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["/home/bran/Documents/cascade/src/WordColumn.js"],"sourcesContent":["import React from 'react';\nimport WordCard from './WordCard';\n\nconst WordColumn = ({ words, onClick, selectedWord, language, connections }) => {\n    //Grab connections for each word, and return the desired language\n    const getConnectionForLanguage = () => {\n        if (language === 'english') {\n          return connections.filter((c) => c.englishWord.language === 'english');\n        } else {\n          return connections.filter((c) => c.frenchWord.language === 'french');\n        }\n    };\n    const connectionsForLanguage = getConnectionForLanguage();\n    \n    //Word pairing state variable, creates yellow highlight when paired\n    const isPaired = pairedWords.some(\n        (pair) => pair[`\\${language}Word`].word.index === index && pair.color === 'yellow'\n      );\n\n    //Custom Styling for borders\n    const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative',\n  };\n\n  return (\n    <div style={style}>\n      {words.map((word, index) => (\n        <WordCard\n            key={index}\n            word={{ text: word, index }}\n            onClick={onClick}\n            isSelected={(selectedWord && selectedWord.word.index === index && selectedWord.language === language) || isPaired }\n            language={language}\n        />\n      ))}\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>\n        {connectionsForLanguage.map((c, i) => (\n          <line\n            key={i}\n            x1={c.englishWord.offsetLeft + c.englishWord.offsetWidth}\n            y1={c.englishWord.offsetTop + c.englishWord.offsetHeight / 2}\n            x2={c.frenchWord.offsetLeft}\n            y2={c.frenchWord.offsetTop + c.frenchWord.offsetHeight / 2}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n          />\n        ))}\n      </svg>\n    </div>\n  );\n};\n\nexport default WordColumn;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}