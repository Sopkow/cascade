{"ast":null,"code":"var _jsxFileName = \"/home/bran/Documents/cascade/src/WordColumn.js\";\nimport React from 'react';\nimport WordCard from './WordCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordColumn = _ref => {\n  let {\n    words,\n    onClick,\n    selectedWord,\n    language,\n    connections,\n    pairedWords\n  } = _ref;\n  //Draw all lines once connection made between two words\n  const getCoordinates = element => {\n    if (!element) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    const rect = element.getBoundingClientRect();\n    return {\n      x: rect.left + rect.width / 2 + window.pageXOffset,\n      y: rect.top + rect.height / 2 + window.pageYOffset\n    };\n  };\n  const lines = connections.map((connection, index) => {\n    if (connection.englishWord && connection.frenchWord && connection.englishWord.element && connection.frenchWord.element) {\n      const {\n        x: x1,\n        y: y1\n      } = getCoordinates(connection.englishWord.element);\n      const {\n        x: x2,\n        y: y2\n      } = getCoordinates(connection.frenchWord.element);\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        stroke: connection.color,\n        strokeWidth: \"2\",\n        markerEnd: \"url(#arrow)\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this);\n    }\n    return null;\n  });\n\n  //Grab connections for each word, and return the desired language\n  const getConnectionForLanguage = () => {\n    if (language === 'english') {\n      return connections.filter(c => c.englishWord.language === 'english');\n    } else {\n      return connections.filter(c => c.frenchWord.language === 'french');\n    }\n  };\n  const connectionsForLanguage = getConnectionForLanguage();\n\n  //Custom Styling for borders\n  const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style,\n    children: [words.map((word, index) => {\n      //Word pairing state variable, creates yellow highlight when paired\n      const isPaired = pairedWords.some(pair => pair[`\\${language}Word`] && pair[`\\${language}Word`].word && pair[`\\${language}Word`].word.index === index && pair.color === 'yellow');\n      return /*#__PURE__*/_jsxDEV(WordCard, {\n        word: {\n          text: word,\n          index\n        },\n        onClick: onClick,\n        isSelected: selectedWord && selectedWord.word.index === index && selectedWord.language === language ? selectedWord.color : isPaired,\n        language: language\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none'\n      },\n      children: connectionsForLanguage.map((c, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: c.englishWord.offsetLeft + c.englishWord.offsetWidth,\n        y1: c.englishWord.offsetTop + c.englishWord.offsetHeight / 2,\n        x2: c.frenchWord.offsetLeft,\n        y2: c.frenchWord.offsetTop + c.frenchWord.offsetHeight / 2,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_c = WordColumn;\nexport default WordColumn;\nvar _c;\n$RefreshReg$(_c, \"WordColumn\");","map":{"version":3,"names":["React","WordCard","jsxDEV","_jsxDEV","WordColumn","_ref","words","onClick","selectedWord","language","connections","pairedWords","getCoordinates","element","x","y","rect","getBoundingClientRect","left","width","window","pageXOffset","top","height","pageYOffset","lines","map","connection","index","englishWord","frenchWord","x1","y1","x2","y2","stroke","color","strokeWidth","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","getConnectionForLanguage","filter","c","connectionsForLanguage","style","border","minHeight","minWidth","padding","display","flexDirection","alignItems","position","children","word","isPaired","some","pair","text","isSelected","pointerEvents","i","offsetLeft","offsetWidth","offsetTop","offsetHeight","_c","$RefreshReg$"],"sources":["/home/bran/Documents/cascade/src/WordColumn.js"],"sourcesContent":["import React from 'react';\nimport WordCard from './WordCard';\n\nconst WordColumn = ({ words, onClick, selectedWord, language, connections, pairedWords }) => {\n    //Draw all lines once connection made between two words\n    const getCoordinates = (element) => {\n        if (!element) {\n          return { x: 0, y: 0 };\n        }\n      \n        const rect = element.getBoundingClientRect();\n        return {\n          x: rect.left + rect.width / 2 + window.pageXOffset,\n          y: rect.top + rect.height / 2 + window.pageYOffset,\n        };\n    };\n    \n    const lines = connections.map((connection, index) => {\n        if (connection.englishWord && connection.frenchWord && connection.englishWord.element && connection.frenchWord.element) {\n          const { x: x1, y: y1 } = getCoordinates(connection.englishWord.element);\n          const { x: x2, y: y2 } = getCoordinates(connection.frenchWord.element);\n      \n          return (\n            <line\n              key={index}\n              x1={x1}\n              y1={y1}\n              x2={x2}\n              y2={y2}\n              stroke={connection.color}\n              strokeWidth=\"2\"\n              markerEnd=\"url(#arrow)\"\n            />\n          );\n        }\n        return null;\n    });\n    \n    //Grab connections for each word, and return the desired language\n    const getConnectionForLanguage = () => {\n        if (language === 'english') {\n          return connections.filter((c) => c.englishWord.language === 'english');\n        } else {\n          return connections.filter((c) => c.frenchWord.language === 'french');\n        }\n    };\n    const connectionsForLanguage = getConnectionForLanguage();\n    \n    //Custom Styling for borders\n    const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative',\n  };\n\n  return (\n    <div style={style}>\n      {words.map((word, index) => {\n\n        //Word pairing state variable, creates yellow highlight when paired\n        const isPaired = pairedWords.some(\n            (pair) =>\n                pair[`\\${language}Word`] &&\n                pair[`\\${language}Word`].word &&\n                pair[`\\${language}Word`].word.index === index &&\n                pair.color === 'yellow'\n        );\n\n        return (\n            <WordCard\n                key={index}\n                word={{ text: word, index }}\n                onClick={onClick}\n                isSelected={(selectedWord && selectedWord.word.index === index && selectedWord.language === language) ? selectedWord.color : isPaired}\n                language={language}\n            />\n        );\n      })}\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>\n        {connectionsForLanguage.map((c, i) => (\n          <line\n            key={i}\n            x1={c.englishWord.offsetLeft + c.englishWord.offsetWidth}\n            y1={c.englishWord.offsetTop + c.englishWord.offsetHeight / 2}\n            x2={c.frenchWord.offsetLeft}\n            y2={c.frenchWord.offsetTop + c.frenchWord.offsetHeight / 2}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n          />\n        ))}\n      </svg>\n    </div>\n  );\n};\n\nexport default WordColumn;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}