{"ast":null,"code":"var _jsxFileName = \"/home/bran/Documents/cascade/src/WordColumn.js\";\nimport React from 'react';\nimport WordCard from './WordCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordColumn = _ref => {\n  let {\n    words,\n    onClick,\n    selectedWord,\n    language,\n    connections\n  } = _ref;\n  const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style,\n    children: [words.map((word, index) => /*#__PURE__*/_jsxDEV(WordCard, {\n      word: {\n        text: word,\n        index\n      },\n      onClick: onClick,\n      isSelected: selectedWord && selectedWord.word.index === index && selectedWord.language === language,\n      language: language\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      },\n      children: connections.map((c, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: c.englishWord.offsetLeft + c.englishWord.offsetWidth,\n        y1: c.englishWord.offsetTop + c.englishWord.offsetHeight / 2,\n        x2: c.frenchWord.offsetLeft,\n        y2: c.frenchWord.offsetTop + c.frenchWord.offsetHeight / 2,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_c = WordColumn;\nexport default WordColumn;\nvar _c;\n$RefreshReg$(_c, \"WordColumn\");","map":{"version":3,"names":["React","WordCard","jsxDEV","_jsxDEV","WordColumn","_ref","words","onClick","selectedWord","language","connections","style","border","minHeight","minWidth","padding","display","flexDirection","alignItems","position","children","map","word","index","text","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","top","left","width","height","c","i","x1","englishWord","offsetLeft","offsetWidth","y1","offsetTop","offsetHeight","x2","frenchWord","y2","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["/home/bran/Documents/cascade/src/WordColumn.js"],"sourcesContent":["import React from 'react';\nimport WordCard from './WordCard';\n\nconst WordColumn = ({ words, onClick, selectedWord, language, connections }) => {\n  const style = {\n    border: '1px solid black',\n    minHeight: '100px',\n    minWidth: '200px',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    position: 'relative',\n  };\n\n  return (\n    <div style={style}>\n      {words.map((word, index) => (\n        <WordCard\n          key={index}\n          word={{ text: word, index }}\n          onClick={onClick}\n          isSelected={selectedWord && selectedWord.word.index === index && selectedWord.language === language}\n          language={language}\n        />\n      ))}\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n        {connections.map((c, i) => (\n          <line\n            key={i}\n            x1={c.englishWord.offsetLeft + c.englishWord.offsetWidth}\n            y1={c.englishWord.offsetTop + c.englishWord.offsetHeight / 2}\n            x2={c.frenchWord.offsetLeft}\n            y2={c.frenchWord.offsetTop + c.frenchWord.offsetHeight / 2}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n          />\n        ))}\n      </svg>\n    </div>\n  );\n};\n\nexport default WordColumn;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGC,IAAA,IAA6D;EAAA,IAA5D;IAAEC,KAAK;IAAEC,OAAO;IAAEC,YAAY;IAAEC,QAAQ;IAAEC;EAAY,CAAC,GAAAL,IAAA;EACzE,MAAMM,KAAK,GAAG;IACZC,MAAM,EAAE,iBAAiB;IACzBC,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE,OAAO;IACjBC,OAAO,EAAE,MAAM;IACfC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE;EACZ,CAAC;EAED,oBACEhB,OAAA;IAAKQ,KAAK,EAAEA,KAAM;IAAAS,QAAA,GACfd,KAAK,CAACe,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBpB,OAAA,CAACF,QAAQ;MAEPqB,IAAI,EAAE;QAAEE,IAAI,EAAEF,IAAI;QAAEC;MAAM,CAAE;MAC5BhB,OAAO,EAAEA,OAAQ;MACjBkB,UAAU,EAAEjB,YAAY,IAAIA,YAAY,CAACc,IAAI,CAACC,KAAK,KAAKA,KAAK,IAAIf,YAAY,CAACC,QAAQ,KAAKA,QAAS;MACpGA,QAAQ,EAAEA;IAAS,GAJdc,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAMb,CAAC,eACF1B,OAAA;MAAKQ,KAAK,EAAE;QAAEQ,QAAQ,EAAE,UAAU;QAAEW,GAAG,EAAE,CAAC;QAAEC,IAAI,EAAE,CAAC;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO,CAAE;MAAAb,QAAA,EAClFV,WAAW,CAACW,GAAG,CAAC,CAACa,CAAC,EAAEC,CAAC,kBACpBhC,OAAA;QAEEiC,EAAE,EAAEF,CAAC,CAACG,WAAW,CAACC,UAAU,GAAGJ,CAAC,CAACG,WAAW,CAACE,WAAY;QACzDC,EAAE,EAAEN,CAAC,CAACG,WAAW,CAACI,SAAS,GAAGP,CAAC,CAACG,WAAW,CAACK,YAAY,GAAG,CAAE;QAC7DC,EAAE,EAAET,CAAC,CAACU,UAAU,CAACN,UAAW;QAC5BO,EAAE,EAAEX,CAAC,CAACU,UAAU,CAACH,SAAS,GAAGP,CAAC,CAACU,UAAU,CAACF,YAAY,GAAG,CAAE;QAC3DI,MAAM,EAAC,OAAO;QACdC,WAAW,EAAC;MAAG,GANVZ,CAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAQT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV,CAAC;AAACmB,EAAA,GAtCI5C,UAAU;AAwChB,eAAeA,UAAU;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}